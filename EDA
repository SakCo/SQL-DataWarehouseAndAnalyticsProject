-- Exploratory Data Analysis(EDA) Project

-- Dimension : The value is not numeric and it is not making sense to aggregate it.
-- Measure : The value is numeric and it is making sense to aggregate it.

-- Step1
-- Database Exploration

-- Explore all objects in the database
SELECT
*
FROM INFORMATION_SCHEMA.TABLES

-- Explore all colums in the database
SELECT
* 
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'


--Step2
-- Dimensions Exploration


-- Explore All Countries our customers come from.
SELECT DISTINCT country FROM gold.dim_customers


-- Explore all categories "The Major Divisions"
SELECT DISTINCT category,subcategory,product_name FROM gold.dim_products
WHERE category IS NOT NULL
ORDER BY 1,2,3


-- Step 3
-- Date Exploration
-- Identify the earliest and latest dates(boundaries) -> Understand the scope of data and the timespan
-- Formula : MIN/MAX[Date Dimension]  For ex. MIN order_date , MAX create_date , etc

-- Find the date of the first and last date
-- How many years of sales are available
SELECT
MIN(order_date) first_order_date,
MAX(order_date) last_order_date,
DATEDIFF(year, MIN(order_date), MAX(order_date)) AS order_range_years
FROM gold.fact_sales


-- Find the youngest and the oldest customer
SELECT
MIN(birthdate) AS oldest_birthdate,
DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
MAX(birthdate) AS youngest_birthdate,
DATEDIFF(year, MAX(birthdate), GETDATE()) AS youngest_age
FROM gold.dim_customers


-- Step 4
-- Measure Exploration (Big Numbers)
-- Calculate the key matric of the business (big numbers)
-- Highest Level of Aggregation And Lowest Level of details
-- Formula: Calculation[Measure] For ex. SUM[Sales], AVG[Price], etc


-- Find how many items are sold
SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales

-- Find the average selling price
SELECT AVG(price) AS avg_price FROM gold.fact_sales

-- Find the total number of orders
SELECT COUNT(order_number) AS total_orders FROM gold.fact_sales
SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales

--Find the total number of products
SELECT COUNT(product_name) AS total_products FROM gold.dim_products
SELECT COUNT(DISTINCT product_name) AS total_products FROM gold.dim_products

--Find the total number of customers
SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers

-- Find the total number of customers that has placed an order
SELECT COUNT(DISTINCT customer_key) AS total_customers FROM gold.fact_sales

-- Generate a Report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quality', SUM(quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Avarage Price', AVG(price) FROM gold.fact_sales
UNION ALL
SELECT 'Total No. Orders', COUNT(DISTINCT order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total No. Products', COUNT(product_name) FROM gold.dim_products
UNION ALL
SELECT 'Total No. Customers', COUNT(customer_key) FROM gold.dim_customers



--Step5
-- Magnitude Analysis
-- Compare the measure values by categories
-- It helps us understand the importance of different categories
-- Formula : Calculate [Measure] by [Dimension]
-- For ex. Total sales by country, total quantity by category, average price by product, etc


-- Find the total customers by countries
SELECT
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC

--Find the total customer by gender
SELECT
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC

--Find total product by category
SELECT
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC


-- What is the average cost in each category
SELECT
category,
AVG(cost) AS avg_costs
FROM gold.dim_products
GROUP BY category
ORDER BY avg_costs DESC

-- What is the total revenue generated for each category
SELECT
p.category,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC


-- What is the total revenue generated by each customer
SELECT
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- What is the distribution of sold items across countries
SELECT
c.country,
SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
c.country
ORDER BY total_sold_items DESC


-- Step 6 
-- Ranking Analysis
-- Order the values of dimensions by measure
-- Top N Performers / Bottom N Performers
-- Formula : Rank[Dimension] By [Measure]
-- For ex. Rank countries by total sales, Top5 products by quantity, Bottom 3 customers by Total orders


-- Which 5 products generate the highest revenue
SELECT TOP 5
p.product_name,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f 
LEFT JOIN gold.dim_products p 
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC


SELECT 
*
FROM (
	SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales f 
	LEFT JOIN gold.dim_products p 
	ON p.product_key = f.product_key
	GROUP BY p.product_name) t
WHERE rank_products <= 5 


-- What are the 5 worst performing products in terms of sales
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) total_revenue
	FROM gold.fact_sales f 
	LEFT JOIN gold.dim_products p 
	ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue 

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC

-- The 3 customers with the fewest orders placed
SELECT TOP 3
c.customer_key,
c.first_name,
c.last_name,
COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_orders
